# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/operator.rst:2
msgid ":mod:`operator` --- Standard operators as functions"
msgstr ":mod:`operator` — Opérateurs standards en tant que fonctions"

#: ../Doc/library/operator.rst:15
msgid ""
"The :mod:`operator` module exports a set of efficient functions "
"corresponding to the intrinsic operators of Python.  For example, ``operator."
"add(x, y)`` is equivalent to the expression ``x+y``.  The function names are "
"those used for special class methods; variants without leading and trailing "
"``__`` are also provided for convenience."
msgstr ""

#: ../Doc/library/operator.rst:21
msgid ""
"The functions fall into categories that perform object comparisons, logical "
"operations, mathematical operations, sequence operations, and abstract type "
"tests."
msgstr ""

#: ../Doc/library/operator.rst:25
msgid ""
"The object comparison functions are useful for all objects, and are named "
"after the rich comparison operators they support:"
msgstr ""
"Les fonctions de comparaison s'appliquent à tous les objets, et leur nom "
"vient des opérateurs de comparaison qu'elles implémentent :"

#: ../Doc/library/operator.rst:42
msgid ""
"Perform \"rich comparisons\" between *a* and *b*. Specifically, ``lt(a, b)`` "
"is equivalent to ``a < b``, ``le(a, b)`` is equivalent to ``a <= b``, "
"``eq(a, b)`` is equivalent to ``a == b``, ``ne(a, b)`` is equivalent to ``a !"
"= b``, ``gt(a, b)`` is equivalent to ``a > b`` and ``ge(a, b)`` is "
"equivalent to ``a >= b``.  Note that unlike the built-in :func:`cmp`, these "
"functions can return any value, which may or may not be interpretable as a "
"Boolean value. See :ref:`comparisons` for more information about rich "
"comparisons."
msgstr ""

#: ../Doc/library/operator.rst:52
msgid ""
"The logical operations are also generally applicable to all objects, and "
"support truth tests, identity tests, and boolean operations:"
msgstr ""
"En général, les opérations logiques s'appliquent aussi à tous les objets et "
"implémentent les tests de vérité, d'identité et les opérations booléennes :"

#: ../Doc/library/operator.rst:59
msgid ""
"Return the outcome of :keyword:`not` *obj*.  (Note that there is no :meth:"
"`__not__` method for object instances; only the interpreter core defines "
"this operation.  The result is affected by the :meth:`__nonzero__` and :meth:"
"`__len__` methods.)"
msgstr ""

#: ../Doc/library/operator.rst:67
msgid ""
"Return :const:`True` if *obj* is true, and :const:`False` otherwise.  This "
"is equivalent to using the :class:`bool` constructor."
msgstr ""
"Renvoie :const:`True` si *obj* est vrai, et :const:`False` dans le cas "
"contraire.  Équivaut à utiliser le constructeur de :class:`bool`."

#: ../Doc/library/operator.rst:73
msgid "Return ``a is b``.  Tests object identity."
msgstr ""
"Renvoie ``a is b``.  Vérifie si les deux paramètres sont le même objet."

#: ../Doc/library/operator.rst:80
msgid "Return ``a is not b``.  Tests object identity."
msgstr ""
"Renvoie ``a is not b``.  Vérifie si les deux paramètres sont deux objets "
"distincts."

#: ../Doc/library/operator.rst:84
msgid "The mathematical and bitwise operations are the most numerous:"
msgstr "Les opérations mathématiques ou bit à bit sont les plus nombreuses :"

#: ../Doc/library/operator.rst:90
msgid "Return the absolute value of *obj*."
msgstr "Renvoie la valeur absolue de *obj*."

#: ../Doc/library/operator.rst:96
msgid "Return ``a + b``, for *a* and *b* numbers."
msgstr "Renvoie ``a + b`` où *a* et *b* sont des nombres."

#: ../Doc/library/operator.rst:102
msgid "Return the bitwise and of *a* and *b*."
msgstr "Renvoie le *et* bit à bit de *a* et *b*."

#: ../Doc/library/operator.rst:108
msgid ""
"Return ``a / b`` when ``__future__.division`` is not in effect.  This is "
"also known as \"classic\" division."
msgstr ""

#: ../Doc/library/operator.rst:115
msgid "Return ``a // b``."
msgstr "Renvoie ``a // b``."

#: ../Doc/library/operator.rst:123
msgid "Return *a* converted to an integer.  Equivalent to ``a.__index__()``."
msgstr "Renvoie *a* converti en entier. Équivaut à ``a.__index__()``."

#: ../Doc/library/operator.rst:133
msgid ""
"Return the bitwise inverse of the number *obj*.  This is equivalent to "
"``~obj``."
msgstr "Renvoie l'inverse bit à bit du nombre *obj*. Équivaut à ``~obj``."

#: ../Doc/library/operator.rst:135
msgid "The names :func:`invert` and :func:`__invert__`."
msgstr ""

#: ../Doc/library/operator.rst:142
msgid "Return *a* shifted left by *b*."
msgstr "Renvoie le décalage de *b* bits vers la gauche de *a*."

#: ../Doc/library/operator.rst:148
msgid "Return ``a % b``."
msgstr "Renvoie``a % b``."

#: ../Doc/library/operator.rst:154
msgid "Return ``a * b``, for *a* and *b* numbers."
msgstr "Renvoie ``a * b`` où *a* et *b* sont des nombres."

#: ../Doc/library/operator.rst:160
msgid "Return *obj* negated (``-obj``)."
msgstr "Renvoie l'opposé de *obj* (``-obj``)."

#: ../Doc/library/operator.rst:166
msgid "Return the bitwise or of *a* and *b*."
msgstr "Renvoie le *ou* bit à bit de *a* et *b*."

#: ../Doc/library/operator.rst:172
msgid "Return *obj* positive (``+obj``)."
msgstr "Renvoie la valeur positive de *obj* (``+obj``)."

#: ../Doc/library/operator.rst:178
msgid "Return ``a ** b``, for *a* and *b* numbers."
msgstr "Renvoie ``a ** b`` où *a* et *b* sont des nombres."

#: ../Doc/library/operator.rst:186
msgid "Return *a* shifted right by *b*."
msgstr "Renvoie le décalage de *b* bits vers la droite de *a*."

#: ../Doc/library/operator.rst:192
msgid "Return ``a - b``."
msgstr "Renvoie ``a - b``."

#: ../Doc/library/operator.rst:198
msgid ""
"Return ``a / b`` when ``__future__.division`` is in effect.  This is also "
"known as \"true\" division."
msgstr ""

#: ../Doc/library/operator.rst:207
msgid "Return the bitwise exclusive or of *a* and *b*."
msgstr "Renvoie le ou exclusif bit à bit de *a* et *b*."

#: ../Doc/library/operator.rst:210
msgid ""
"Operations which work with sequences (some of them with mappings too) "
"include:"
msgstr ""
"Les opérations sur séquences (et pour certaines, sur correspondances) sont :"

#: ../Doc/library/operator.rst:215
msgid "Return ``a + b`` for *a* and *b* sequences."
msgstr "Renvoie ``a + b`` où *a* et *b* sont des séquences."

#: ../Doc/library/operator.rst:221
msgid "Return the outcome of the test ``b in a``. Note the reversed operands."
msgstr ""
"Renvoie le résultat du test ``b in a``. Notez que les opérandes sont "
"inversées."

#: ../Doc/library/operator.rst:223
msgid "The name :func:`__contains__`."
msgstr ""

#: ../Doc/library/operator.rst:229
msgid "Return the number of occurrences of *b* in *a*."
msgstr "Renvoie le nombre d’occurrences de *b* dans *a*."

#: ../Doc/library/operator.rst:235
msgid "Remove the value of *a* at index *b*."
msgstr "Renvoie la valeur de *a* à l'indice *b*."

#: ../Doc/library/operator.rst:241
msgid "Delete the slice of *a* from index *b* to index *c-1*."
msgstr ""

#: ../Doc/library/operator.rst:243
msgid ""
"This function is removed in Python 3.x.  Use :func:`delitem` with a slice "
"index."
msgstr ""

#: ../Doc/library/operator.rst:251
msgid "Return the value of *a* at index *b*."
msgstr "Renvoie la valeur de *a* à l'indice *b*."

#: ../Doc/library/operator.rst:257
msgid "Return the slice of *a* from index *b* to index *c-1*."
msgstr ""

#: ../Doc/library/operator.rst:259
msgid ""
"This function is removed in Python 3.x.  Use :func:`getitem` with a slice "
"index."
msgstr ""

#: ../Doc/library/operator.rst:266
msgid "Return the index of the first of occurrence of *b* in *a*."
msgstr "Renvoie l'indice de la première occurrence de *b* dans *a*."

#: ../Doc/library/operator.rst:272
msgid "Use :func:`__mul__` instead."
msgstr ""

#: ../Doc/library/operator.rst:275
msgid "Return ``a * b`` where *a* is a sequence and *b* is an integer."
msgstr ""

#: ../Doc/library/operator.rst:280
msgid "Use :func:`contains` instead."
msgstr ""

#: ../Doc/library/operator.rst:283
msgid "Alias for :func:`contains`."
msgstr ""

#: ../Doc/library/operator.rst:289
msgid "Set the value of *a* at index *b* to *c*."
msgstr "Affecte *c* dans *a* à l'indice *b*."

#: ../Doc/library/operator.rst:295
msgid "Set the slice of *a* from index *b* to index *c-1* to the sequence *v*."
msgstr ""

#: ../Doc/library/operator.rst:297
msgid ""
"This function is removed in Python 3.x.  Use :func:`setitem` with a slice "
"index."
msgstr ""

#: ../Doc/library/operator.rst:301
msgid "Example use of operator functions::"
msgstr ""

#: ../Doc/library/operator.rst:311
msgid ""
"Many operations have an \"in-place\" version.  The following functions "
"provide a more primitive access to in-place operators than the usual syntax "
"does; for example, the :term:`statement` ``x += y`` is equivalent to ``x = "
"operator.iadd(x, y)``.  Another way to put it is to say that ``z = operator."
"iadd(x, y)`` is equivalent to the compound statement ``z = x; z += y``."
msgstr ""

#: ../Doc/library/operator.rst:321
msgid "``a = iadd(a, b)`` is equivalent to ``a += b``."
msgstr "``a = iadd(a, b)`` is equivalent to ``a += b``."

#: ../Doc/library/operator.rst:329
msgid "``a = iand(a, b)`` is equivalent to ``a &= b``."
msgstr "``a = iand(a, b)`` is equivalent to ``a &= b``."

#: ../Doc/library/operator.rst:337
msgid ""
"``a = iconcat(a, b)`` is equivalent to ``a += b`` for *a* and *b* sequences."
msgstr ""
"``a = iconcat(a, b)`` is equivalent to ``a += b`` for *a* and *b* sequences."

#: ../Doc/library/operator.rst:345
msgid ""
"``a = idiv(a, b)`` is equivalent to ``a /= b`` when ``__future__.division`` "
"is not in effect."
msgstr ""

#: ../Doc/library/operator.rst:354
msgid "``a = ifloordiv(a, b)`` is equivalent to ``a //= b``."
msgstr "``a = ifloordiv(a, b)`` is equivalent to ``a //= b``."

#: ../Doc/library/operator.rst:362
msgid "``a = ilshift(a, b)`` is equivalent to ``a <<= b``."
msgstr "``a = ilshift(a, b)`` is equivalent to ``a <<= b``."

#: ../Doc/library/operator.rst:370
msgid "``a = imod(a, b)`` is equivalent to ``a %= b``."
msgstr "``a = imod(a, b)`` is equivalent to ``a %= b``."

#: ../Doc/library/operator.rst:378
msgid "``a = imul(a, b)`` is equivalent to ``a *= b``."
msgstr "``a = imul(a, b)`` is equivalent to ``a *= b``."

#: ../Doc/library/operator.rst:386
msgid "``a = ior(a, b)`` is equivalent to ``a |= b``."
msgstr "``a = ior(a, b)`` is equivalent to ``a |= b``."

#: ../Doc/library/operator.rst:394
msgid "``a = ipow(a, b)`` is equivalent to ``a **= b``."
msgstr "``a = ipow(a, b)`` is equivalent to ``a **= b``."

#: ../Doc/library/operator.rst:402
msgid "Use :func:`__imul__` instead."
msgstr ""

#: ../Doc/library/operator.rst:405
msgid ""
"``a = irepeat(a, b)`` is equivalent to ``a *= b`` where *a* is a sequence "
"and *b* is an integer."
msgstr ""

#: ../Doc/library/operator.rst:414
msgid "``a = irshift(a, b)`` is equivalent to ``a >>= b``."
msgstr "``a = irshift(a, b)`` is equivalent to ``a >>= b``."

#: ../Doc/library/operator.rst:422
msgid "``a = isub(a, b)`` is equivalent to ``a -= b``."
msgstr "``a = isub(a, b)`` is equivalent to ``a -= b``."

#: ../Doc/library/operator.rst:430
msgid ""
"``a = itruediv(a, b)`` is equivalent to ``a /= b`` when ``__future__."
"division`` is in effect."
msgstr ""

#: ../Doc/library/operator.rst:439
msgid "``a = ixor(a, b)`` is equivalent to ``a ^= b``."
msgstr "``a = ixor(a, b)`` is equivalent to ``a ^= b``."

#: ../Doc/library/operator.rst:444
msgid ""
"The :mod:`operator` module also defines a few predicates to test the type of "
"objects; however, these are not all reliable.  It is preferable to test "
"abstract base classes instead (see :mod:`collections` and :mod:`numbers` for "
"details)."
msgstr ""

#: ../Doc/library/operator.rst:451
msgid "Use ``isinstance(x, collections.Callable)`` instead."
msgstr ""

#: ../Doc/library/operator.rst:454
msgid ""
"Returns true if the object *obj* can be called like a function, otherwise it "
"returns false.  True is returned for functions, bound and unbound methods, "
"class objects, and instance objects which support the :meth:`__call__` "
"method."
msgstr ""

#: ../Doc/library/operator.rst:461
msgid "Use ``isinstance(x, collections.Mapping)`` instead."
msgstr ""

#: ../Doc/library/operator.rst:464
msgid ""
"Returns true if the object *obj* supports the mapping interface. This is "
"true for dictionaries and all instance objects defining :meth:`__getitem__`."
msgstr ""

#: ../Doc/library/operator.rst:470
msgid "Use ``isinstance(x, numbers.Number)`` instead."
msgstr ""

#: ../Doc/library/operator.rst:473
msgid ""
"Returns true if the object *obj* represents a number.  This is true for all "
"numeric types implemented in C."
msgstr ""

#: ../Doc/library/operator.rst:479
msgid "Use ``isinstance(x, collections.Sequence)`` instead."
msgstr ""

#: ../Doc/library/operator.rst:482
msgid ""
"Returns true if the object *obj* supports the sequence protocol. This "
"returns true for all objects which define sequence methods in C, and for all "
"instance objects defining :meth:`__getitem__`."
msgstr ""

#: ../Doc/library/operator.rst:487
msgid ""
"The :mod:`operator` module also defines tools for generalized attribute and "
"item lookups.  These are useful for making fast field extractors as "
"arguments for :func:`map`, :func:`sorted`, :meth:`itertools.groupby`, or "
"other functions that expect a function argument."
msgstr ""
"Le module :mod:`operator` définit aussi des fonctions pour la recherche "
"générique d'attributs ou d'objets. Elles sont particulièrement utiles pour "
"construire rapidement des accesseurs d'attributs à passer en paramètre à :"
"func:`map`, :func:`sorted`, :meth:`itertools.groupby` ou à toute autre "
"fonction prenant une fonction en paramètre."

#: ../Doc/library/operator.rst:496
msgid ""
"Return a callable object that fetches *attr* from its operand. If more than "
"one attribute is requested, returns a tuple of attributes. The attribute "
"names can also contain dots. For example:"
msgstr ""
"Renvoie un objet appelable qui récupère *attr* de son opérande. Si plus d'un "
"attribut est demandé, renvoie un n-uplet d'attributs. Les noms des attributs "
"peuvent aussi comporter des points. Par exemple :"

#: ../Doc/library/operator.rst:500
msgid "After ``f = attrgetter('name')``, the call ``f(b)`` returns ``b.name``."
msgstr "Avec ``f = attrgetter('name')``, l'appel ``f(b)`` renvoie ``b.name``."

#: ../Doc/library/operator.rst:502
msgid ""
"After ``f = attrgetter('name', 'date')``, the call ``f(b)`` returns ``(b."
"name, b.date)``."
msgstr ""
"Avec ``f = attrgetter('name', 'date')``, l'appel ``f(b)`` renvoie ``(b.name, "
"b.date)``."

#: ../Doc/library/operator.rst:505
msgid ""
"After ``f = attrgetter('name.first', 'name.last')``, the call ``f(b)`` "
"returns ``(b.name.first, b.name.last)``."
msgstr ""
"Après ``f = attrgetter('name.first', 'name.last')``, l'appel ``f(b)`` "
"renvoie ``(b.name.first, b.name.last)``."

#: ../Doc/library/operator.rst:508 ../Doc/library/operator.rst:547
#: ../Doc/library/operator.rst:597
msgid "Equivalent to::"
msgstr "Équivalent à : ::"

#: ../Doc/library/operator.rst:528
msgid "Added support for multiple attributes."
msgstr ""

#: ../Doc/library/operator.rst:531
msgid "Added support for dotted attributes."
msgstr ""

#: ../Doc/library/operator.rst:538
msgid ""
"Return a callable object that fetches *item* from its operand using the "
"operand's :meth:`__getitem__` method.  If multiple items are specified, "
"returns a tuple of lookup values.  For example:"
msgstr ""
"Renvoie un objet appelable qui récupère *item* de l'opérande en utilisant la "
"méthode :meth:`__getitem__`. Si plusieurs *item* sont passés en paramètre, "
"renvoie un n-uplet des valeurs récupérées. Par exemple :"

#: ../Doc/library/operator.rst:542
msgid "After ``f = itemgetter(2)``, the call ``f(r)`` returns ``r[2]``."
msgstr "Avec ``f = itemgetter(2)``, ``f(r)`` renvoie ``r[2]``."

#: ../Doc/library/operator.rst:544
msgid ""
"After ``g = itemgetter(2, 5, 3)``, the call ``g(r)`` returns ``(r[2], r[5], "
"r[3])``."
msgstr ""
"Avec ``g = itemgetter(2, 5, 3)``, ``g(r)`` renvoie ``(r[2], r[5], r[3])``."

#: ../Doc/library/operator.rst:559
msgid ""
"The items can be any type accepted by the operand's :meth:`__getitem__` "
"method.  Dictionaries accept any hashable value.  Lists, tuples, and strings "
"accept an index or a slice:"
msgstr ""
"Les *items* en entrée peuvent être de n'importe quel type tant que celui-ci "
"est géré par la méthode :meth:`__getitem__` de l'opérande. Les dictionnaires "
"acceptent toute valeur hachable. Les listes, n-uplets et chaînes de "
"caractères acceptent un index ou une tranche :"

#: ../Doc/library/operator.rst:572
msgid "Added support for multiple item extraction."
msgstr ""

#: ../Doc/library/operator.rst:575
msgid ""
"Example of using :func:`itemgetter` to retrieve specific fields from a tuple "
"record:"
msgstr ""
"Exemple d'utilisation de :func:`itemgetter` pour récupérer des champs "
"spécifiques d'un n-uplet :"

#: ../Doc/library/operator.rst:588
msgid ""
"Return a callable object that calls the method *name* on its operand.  If "
"additional arguments and/or keyword arguments are given, they will be given "
"to the method as well.  For example:"
msgstr ""
"Renvoie un objet appelable qui appelle la méthode *name* de son opérande. Si "
"des paramètres supplémentaires et/ou des paramètres nommés sont donnés, ils "
"seront aussi passés à la méthode. Par exemple :"

#: ../Doc/library/operator.rst:592
msgid ""
"After ``f = methodcaller('name')``, the call ``f(b)`` returns ``b.name()``."
msgstr "Avec  ``f = methodcaller('name')``, ``f(b)`` renvoie ``b.name()``."

#: ../Doc/library/operator.rst:594
msgid ""
"After ``f = methodcaller('name', 'foo', bar=1)``, the call ``f(b)`` returns "
"``b.name('foo', bar=1)``."
msgstr ""
"Avec ``f = methodcaller('name', 'foo', bar=1)``, ``f(b)`` renvoie ``b."
"name('foo', bar=1)``."

#: ../Doc/library/operator.rst:610
msgid "Mapping Operators to Functions"
msgstr "Correspondances entre opérateurs et fonctions"

#: ../Doc/library/operator.rst:612
msgid ""
"This table shows how abstract operations correspond to operator symbols in "
"the Python syntax and the functions in the :mod:`operator` module."
msgstr ""
"Le tableau montre la correspondance entre les symboles des opérateurs Python "
"et les fonctions du module :mod:`operator`."

#: ../Doc/library/operator.rst:616
msgid "Operation"
msgstr "Opération"

#: ../Doc/library/operator.rst:616
msgid "Syntax"
msgstr "Syntaxe"

#: ../Doc/library/operator.rst:616
msgid "Function"
msgstr "Fonction"

#: ../Doc/library/operator.rst:618
msgid "Addition"
msgstr "Addition"

#: ../Doc/library/operator.rst:618
msgid "``a + b``"
msgstr "``a + b``"

#: ../Doc/library/operator.rst:618
msgid "``add(a, b)``"
msgstr "``add(a, b)``"

#: ../Doc/library/operator.rst:620
msgid "Concatenation"
msgstr "Concaténation"

#: ../Doc/library/operator.rst:620
msgid "``seq1 + seq2``"
msgstr "``seq1 + seq2``"

#: ../Doc/library/operator.rst:620
msgid "``concat(seq1, seq2)``"
msgstr "``concat(seq1, seq2)``"

#: ../Doc/library/operator.rst:622
msgid "Containment Test"
msgstr "Test d'inclusion"

#: ../Doc/library/operator.rst:622
msgid "``obj in seq``"
msgstr "``obj in seq``"

#: ../Doc/library/operator.rst:622
msgid "``contains(seq, obj)``"
msgstr "``contains(seq, obj)``"

#: ../Doc/library/operator.rst:624 ../Doc/library/operator.rst:627
#: ../Doc/library/operator.rst:630
msgid "Division"
msgstr "Division"

#: ../Doc/library/operator.rst:624 ../Doc/library/operator.rst:627
msgid "``a / b``"
msgstr "``a / b``"

#: ../Doc/library/operator.rst:624
msgid "``div(a, b)`` (without ``__future__.division``)"
msgstr ""

#: ../Doc/library/operator.rst:627
msgid "``truediv(a, b)`` (with ``__future__.division``)"
msgstr ""

#: ../Doc/library/operator.rst:630
msgid "``a // b``"
msgstr "``a // b``"

#: ../Doc/library/operator.rst:630
msgid "``floordiv(a, b)``"
msgstr "``floordiv(a, b)``"

#: ../Doc/library/operator.rst:632
msgid "Bitwise And"
msgstr "*Et* bit à bit"

#: ../Doc/library/operator.rst:632
msgid "``a & b``"
msgstr "``a & b``"

#: ../Doc/library/operator.rst:632
msgid "``and_(a, b)``"
msgstr "``and_(a, b)``"

#: ../Doc/library/operator.rst:634
msgid "Bitwise Exclusive Or"
msgstr "*Ou exclusif* bit à bit"

#: ../Doc/library/operator.rst:634
msgid "``a ^ b``"
msgstr "``a ^ b``"

#: ../Doc/library/operator.rst:634
msgid "``xor(a, b)``"
msgstr "``xor(a, b)``"

#: ../Doc/library/operator.rst:636
msgid "Bitwise Inversion"
msgstr "Inversion bit à bit"

#: ../Doc/library/operator.rst:636
msgid "``~ a``"
msgstr "``~ a``"

#: ../Doc/library/operator.rst:636
msgid "``invert(a)``"
msgstr "``invert(a)``"

#: ../Doc/library/operator.rst:638
msgid "Bitwise Or"
msgstr "*Ou* bit à bit"

#: ../Doc/library/operator.rst:638
msgid "``a | b``"
msgstr "``a | b``"

#: ../Doc/library/operator.rst:638
msgid "``or_(a, b)``"
msgstr "``or_(a, b)``"

#: ../Doc/library/operator.rst:640
msgid "Exponentiation"
msgstr "Exponentiation"

#: ../Doc/library/operator.rst:640
msgid "``a ** b``"
msgstr "``a ** b``"

#: ../Doc/library/operator.rst:640
msgid "``pow(a, b)``"
msgstr "``pow(a, b)``"

#: ../Doc/library/operator.rst:642 ../Doc/library/operator.rst:644
msgid "Identity"
msgstr "Identité"

#: ../Doc/library/operator.rst:642
msgid "``a is b``"
msgstr "``a is b``"

#: ../Doc/library/operator.rst:642
msgid "``is_(a, b)``"
msgstr "``is_(a, b)``"

#: ../Doc/library/operator.rst:644
msgid "``a is not b``"
msgstr "``a is not b``"

#: ../Doc/library/operator.rst:644
msgid "``is_not(a, b)``"
msgstr "``is_not(a, b)``"

#: ../Doc/library/operator.rst:646
msgid "Indexed Assignment"
msgstr "Affectation par index"

#: ../Doc/library/operator.rst:646
msgid "``obj[k] = v``"
msgstr "``obj[k] = v``"

#: ../Doc/library/operator.rst:646
msgid "``setitem(obj, k, v)``"
msgstr "``setitem(obj, k, v)``"

#: ../Doc/library/operator.rst:648
msgid "Indexed Deletion"
msgstr "Suppression par index"

#: ../Doc/library/operator.rst:648
msgid "``del obj[k]``"
msgstr "``del obj[k]``"

#: ../Doc/library/operator.rst:648
msgid "``delitem(obj, k)``"
msgstr "``delitem(obj, k)``"

#: ../Doc/library/operator.rst:650
msgid "Indexing"
msgstr "Indexation"

#: ../Doc/library/operator.rst:650
msgid "``obj[k]``"
msgstr "``obj[k]``"

#: ../Doc/library/operator.rst:650
msgid "``getitem(obj, k)``"
msgstr "``getitem(obj, k)``"

#: ../Doc/library/operator.rst:652
msgid "Left Shift"
msgstr "Décalage bit à bit gauche"

#: ../Doc/library/operator.rst:652
msgid "``a << b``"
msgstr "``a << b``"

#: ../Doc/library/operator.rst:652
msgid "``lshift(a, b)``"
msgstr "``lshift(a, b)``"

#: ../Doc/library/operator.rst:654
msgid "Modulo"
msgstr "Modulo"

#: ../Doc/library/operator.rst:654
msgid "``a % b``"
msgstr "``a % b``"

#: ../Doc/library/operator.rst:654
msgid "``mod(a, b)``"
msgstr "``mod(a, b)``"

#: ../Doc/library/operator.rst:656
msgid "Multiplication"
msgstr "Multiplication"

#: ../Doc/library/operator.rst:656
msgid "``a * b``"
msgstr "``a * b``"

#: ../Doc/library/operator.rst:656
msgid "``mul(a, b)``"
msgstr "``mul(a, b)``"

#: ../Doc/library/operator.rst:658
msgid "Negation (Arithmetic)"
msgstr "Opposé"

#: ../Doc/library/operator.rst:658
msgid "``- a``"
msgstr "``- a``"

#: ../Doc/library/operator.rst:658
msgid "``neg(a)``"
msgstr "``neg(a)``"

#: ../Doc/library/operator.rst:660
msgid "Negation (Logical)"
msgstr "Négation (logique)"

#: ../Doc/library/operator.rst:660
msgid "``not a``"
msgstr "``not a``"

#: ../Doc/library/operator.rst:660
msgid "``not_(a)``"
msgstr "``not_(a)``"

#: ../Doc/library/operator.rst:662
msgid "Positive"
msgstr "Valeur positive"

#: ../Doc/library/operator.rst:662
msgid "``+ a``"
msgstr "``+ a``"

#: ../Doc/library/operator.rst:662
msgid "``pos(a)``"
msgstr "``pos(a)``"

#: ../Doc/library/operator.rst:664
msgid "Right Shift"
msgstr "Décalage bit à bit droite"

#: ../Doc/library/operator.rst:664
msgid "``a >> b``"
msgstr "``a >> b``"

#: ../Doc/library/operator.rst:664
msgid "``rshift(a, b)``"
msgstr "``rshift(a, b)``"

#: ../Doc/library/operator.rst:666
msgid "Sequence Repetition"
msgstr ""

#: ../Doc/library/operator.rst:666
msgid "``seq * i``"
msgstr ""

#: ../Doc/library/operator.rst:666
msgid "``repeat(seq, i)``"
msgstr ""

#: ../Doc/library/operator.rst:668
msgid "Slice Assignment"
msgstr "Affectation par tranche"

#: ../Doc/library/operator.rst:668
msgid "``seq[i:j] = values``"
msgstr "``seq[i:j] = values``"

#: ../Doc/library/operator.rst:668
msgid "``setitem(seq, slice(i, j), values)``"
msgstr "``setitem(seq, slice(i, j), values)``"

#: ../Doc/library/operator.rst:670
msgid "Slice Deletion"
msgstr "Suppression par tranche"

#: ../Doc/library/operator.rst:670
msgid "``del seq[i:j]``"
msgstr "``del seq[i:j]``"

#: ../Doc/library/operator.rst:670
msgid "``delitem(seq, slice(i, j))``"
msgstr "``delitem(seq, slice(i, j))``"

#: ../Doc/library/operator.rst:672
msgid "Slicing"
msgstr "Tranche"

#: ../Doc/library/operator.rst:672
msgid "``seq[i:j]``"
msgstr "``seq[i:j]``"

#: ../Doc/library/operator.rst:672
msgid "``getitem(seq, slice(i, j))``"
msgstr "``getitem(seq, slice(i, j))``"

#: ../Doc/library/operator.rst:674
msgid "String Formatting"
msgstr "Formatage de chaînes de caractères"

#: ../Doc/library/operator.rst:674
msgid "``s % obj``"
msgstr "``s % obj``"

#: ../Doc/library/operator.rst:674
msgid "``mod(s, obj)``"
msgstr "``mod(s, obj)``"

#: ../Doc/library/operator.rst:676
msgid "Subtraction"
msgstr "Soustraction"

#: ../Doc/library/operator.rst:676
msgid "``a - b``"
msgstr "``a - b``"

#: ../Doc/library/operator.rst:676
msgid "``sub(a, b)``"
msgstr "``sub(a, b)``"

#: ../Doc/library/operator.rst:678
msgid "Truth Test"
msgstr "Test de véracité"

#: ../Doc/library/operator.rst:678
msgid "``obj``"
msgstr "``obj``"

#: ../Doc/library/operator.rst:678
msgid "``truth(obj)``"
msgstr "``truth(obj)``"

#: ../Doc/library/operator.rst:680 ../Doc/library/operator.rst:682
#: ../Doc/library/operator.rst:688 ../Doc/library/operator.rst:690
msgid "Ordering"
msgstr "Ordre"

#: ../Doc/library/operator.rst:680
msgid "``a < b``"
msgstr "``a < b``"

#: ../Doc/library/operator.rst:680
msgid "``lt(a, b)``"
msgstr "``lt(a, b)``"

#: ../Doc/library/operator.rst:682
msgid "``a <= b``"
msgstr "``a <= b``"

#: ../Doc/library/operator.rst:682
msgid "``le(a, b)``"
msgstr "``le(a, b)``"

#: ../Doc/library/operator.rst:684
msgid "Equality"
msgstr "Égalité"

#: ../Doc/library/operator.rst:684
msgid "``a == b``"
msgstr "``a == b``"

#: ../Doc/library/operator.rst:684
msgid "``eq(a, b)``"
msgstr "``eq(a, b)``"

#: ../Doc/library/operator.rst:686
msgid "Difference"
msgstr "Différence"

#: ../Doc/library/operator.rst:686
msgid "``a != b``"
msgstr "``a != b``"

#: ../Doc/library/operator.rst:686
msgid "``ne(a, b)``"
msgstr "``ne(a, b)``"

#: ../Doc/library/operator.rst:688
msgid "``a >= b``"
msgstr "``a >= b``"

#: ../Doc/library/operator.rst:688
msgid "``ge(a, b)``"
msgstr "``ge(a, b)``"

#: ../Doc/library/operator.rst:690
msgid "``a > b``"
msgstr "``a > b``"

#: ../Doc/library/operator.rst:690
msgid "``gt(a, b)``"
msgstr "``gt(a, b)``"
