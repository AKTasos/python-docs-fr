# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-04 11:33+0200\n"
"PO-Revision-Date: 2019-09-04 11:42+0200\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/c-api/init_config.rst:7
msgid "Python Initialization Configuration"
msgstr ""

#: ../Doc/c-api/init_config.rst:11
msgid "Structures:"
msgstr ""

#: ../Doc/c-api/init_config.rst:13
msgid ":c:type:`PyConfig`"
msgstr ""

#: ../Doc/c-api/init_config.rst:14
msgid ":c:type:`PyPreConfig`"
msgstr ""

#: ../Doc/c-api/init_config.rst:15
msgid ":c:type:`PyStatus`"
msgstr ""

#: ../Doc/c-api/init_config.rst:16
msgid ":c:type:`PyWideStringList`"
msgstr ""

#: ../Doc/c-api/init_config.rst:18
msgid "Functions:"
msgstr ""

#: ../Doc/c-api/init_config.rst:20
msgid ":c:func:`PyConfig_Clear`"
msgstr ""

#: ../Doc/c-api/init_config.rst:21
msgid ":c:func:`PyConfig_InitIsolatedConfig`"
msgstr ""

#: ../Doc/c-api/init_config.rst:22
msgid ":c:func:`PyConfig_InitPythonConfig`"
msgstr ""

#: ../Doc/c-api/init_config.rst:23
msgid ":c:func:`PyConfig_Read`"
msgstr ""

#: ../Doc/c-api/init_config.rst:24
msgid ":c:func:`PyConfig_SetArgv`"
msgstr ""

#: ../Doc/c-api/init_config.rst:25
msgid ":c:func:`PyConfig_SetBytesArgv`"
msgstr ""

#: ../Doc/c-api/init_config.rst:26
msgid ":c:func:`PyConfig_SetBytesString`"
msgstr ""

#: ../Doc/c-api/init_config.rst:27
msgid ":c:func:`PyConfig_SetString`"
msgstr ""

#: ../Doc/c-api/init_config.rst:28
msgid ":c:func:`PyConfig_SetWideStringList`"
msgstr ""

#: ../Doc/c-api/init_config.rst:29
msgid ":c:func:`PyPreConfig_InitIsolatedConfig`"
msgstr ""

#: ../Doc/c-api/init_config.rst:30
msgid ":c:func:`PyPreConfig_InitPythonConfig`"
msgstr ""

#: ../Doc/c-api/init_config.rst:31
msgid ":c:func:`PyStatus_Error`"
msgstr ""

#: ../Doc/c-api/init_config.rst:32
msgid ":c:func:`PyStatus_Exception`"
msgstr ""

#: ../Doc/c-api/init_config.rst:33
msgid ":c:func:`PyStatus_Exit`"
msgstr ""

#: ../Doc/c-api/init_config.rst:34
msgid ":c:func:`PyStatus_IsError`"
msgstr ""

#: ../Doc/c-api/init_config.rst:35
msgid ":c:func:`PyStatus_IsExit`"
msgstr ""

#: ../Doc/c-api/init_config.rst:36
msgid ":c:func:`PyStatus_NoMemory`"
msgstr ""

#: ../Doc/c-api/init_config.rst:37
msgid ":c:func:`PyStatus_Ok`"
msgstr ""

#: ../Doc/c-api/init_config.rst:38
msgid ":c:func:`PyWideStringList_Append`"
msgstr ""

#: ../Doc/c-api/init_config.rst:39
msgid ":c:func:`PyWideStringList_Insert`"
msgstr ""

#: ../Doc/c-api/init_config.rst:40
msgid ":c:func:`Py_ExitStatusException`"
msgstr ""

#: ../Doc/c-api/init_config.rst:41
msgid ":c:func:`Py_InitializeFromConfig`"
msgstr ""

#: ../Doc/c-api/init_config.rst:42
msgid ":c:func:`Py_PreInitialize`"
msgstr ""

#: ../Doc/c-api/init_config.rst:43
msgid ":c:func:`Py_PreInitializeFromArgs`"
msgstr ""

#: ../Doc/c-api/init_config.rst:44
msgid ":c:func:`Py_PreInitializeFromBytesArgs`"
msgstr ""

#: ../Doc/c-api/init_config.rst:45
msgid ":c:func:`Py_RunMain`"
msgstr ""

#: ../Doc/c-api/init_config.rst:47
msgid ""
"The preconfiguration (``PyPreConfig`` type) is stored in ``_PyRuntime."
"preconfig`` and the configuration (``PyConfig`` type) is stored in "
"``PyInterpreterState.config``."
msgstr ""

#: ../Doc/c-api/init_config.rst:51
msgid ""
"See also :ref:`Initialization, Finalization, and Threads <initialization>`."
msgstr ""

#: ../Doc/c-api/init_config.rst:54
msgid ":pep:`587` \"Python Initialization Configuration\"."
msgstr ""

#: ../Doc/c-api/init_config.rst:58
msgid "PyWideStringList"
msgstr ""

#: ../Doc/c-api/init_config.rst:62
msgid "List of ``wchar_t*`` strings."
msgstr ""

#: ../Doc/c-api/init_config.rst:64
msgid ""
"If *length* is non-zero, *items* must be non-NULL and all strings must be "
"non-NULL."
msgstr ""

#: ../Doc/c-api/init_config.rst:67
msgid "Methods:"
msgstr ""

#: ../Doc/c-api/init_config.rst:71
msgid "Append *item* to *list*."
msgstr ""

#: ../Doc/c-api/init_config.rst:73 ../Doc/c-api/init_config.rst:84
msgid "Python must be preinitialized to call this function."
msgstr ""

#: ../Doc/c-api/init_config.rst:77
msgid "Insert *item* into *list* at *index*."
msgstr ""

#: ../Doc/c-api/init_config.rst:79
msgid ""
"If *index* is greater than or equal to *list* length, append *item* to "
"*list*."
msgstr ""

#: ../Doc/c-api/init_config.rst:82
msgid "*index* must be greater than or equal to 0."
msgstr ""

#: ../Doc/c-api/init_config.rst:86 ../Doc/c-api/init_config.rst:106
#: ../Doc/c-api/init_config.rst:209 ../Doc/c-api/init_config.rst:414
msgid "Structure fields:"
msgstr ""

#: ../Doc/c-api/init_config.rst:90
msgid "List length."
msgstr ""

#: ../Doc/c-api/init_config.rst:94
msgid "List items."
msgstr ""

#: ../Doc/c-api/init_config.rst:97
msgid "PyStatus"
msgstr ""

#: ../Doc/c-api/init_config.rst:101
msgid ""
"Structure to store an initialization function status: success, error or exit."
msgstr ""

#: ../Doc/c-api/init_config.rst:104
msgid "For an error, it can store the C function name which created the error."
msgstr ""

#: ../Doc/c-api/init_config.rst:110
msgid "Exit code. Argument passed to ``exit()``."
msgstr ""

#: ../Doc/c-api/init_config.rst:114
msgid "Error message."
msgstr ""

#: ../Doc/c-api/init_config.rst:118
msgid "Name of the function which created an error, can be ``NULL``."
msgstr ""

#: ../Doc/c-api/init_config.rst:120
msgid "Functions to create a status:"
msgstr ""

#: ../Doc/c-api/init_config.rst:124
msgid "Success."
msgstr ""

#: ../Doc/c-api/init_config.rst:128
msgid "Initialization error with a message."
msgstr ""

#: ../Doc/c-api/init_config.rst:132
msgid "Memory allocation failure (out of memory)."
msgstr ""

#: ../Doc/c-api/init_config.rst:136
msgid "Exit Python with the specified exit code."
msgstr ""

#: ../Doc/c-api/init_config.rst:138
msgid "Functions to handle a status:"
msgstr ""

#: ../Doc/c-api/init_config.rst:142
msgid ""
"Is the status an error or an exit? If true, the exception must be handled; "
"by calling :c:func:`Py_ExitStatusException` for example."
msgstr ""

#: ../Doc/c-api/init_config.rst:147
msgid "Is the result an error?"
msgstr ""

#: ../Doc/c-api/init_config.rst:151
msgid "Is the result an exit?"
msgstr ""

#: ../Doc/c-api/init_config.rst:155
msgid ""
"Call ``exit(exitcode)`` if *status* is an exit. Print the error message and "
"exit with a non-zero exit code if *status* is an error.  Must only be called "
"if ``PyStatus_Exception(status)`` is non-zero."
msgstr ""

#: ../Doc/c-api/init_config.rst:160
msgid ""
"Internally, Python uses macros which set ``PyStatus.func``, whereas "
"functions to create a status set ``func`` to ``NULL``."
msgstr ""

#: ../Doc/c-api/init_config.rst:163
msgid "Example::"
msgstr ""

#: ../Doc/c-api/init_config.rst:187
msgid "PyPreConfig"
msgstr ""

#: ../Doc/c-api/init_config.rst:191
msgid "Structure used to preinitialize Python:"
msgstr ""

#: ../Doc/c-api/init_config.rst:193
msgid "Set the Python memory allocator"
msgstr ""

#: ../Doc/c-api/init_config.rst:194
msgid "Configure the LC_CTYPE locale"
msgstr ""

#: ../Doc/c-api/init_config.rst:195
msgid "Set the UTF-8 mode"
msgstr ""

#: ../Doc/c-api/init_config.rst:197
msgid "Function to initialize a preconfiguration:"
msgstr ""

#: ../Doc/c-api/init_config.rst:201
msgid ""
"Initialize the preconfiguration with :ref:`Python Configuration <init-python-"
"config>`."
msgstr ""

#: ../Doc/c-api/init_config.rst:206
msgid ""
"Initialize the preconfiguration with :ref:`Isolated Configuration <init-"
"isolated-conf>`."
msgstr ""

#: ../Doc/c-api/init_config.rst:213
msgid "Name of the memory allocator:"
msgstr ""

#: ../Doc/c-api/init_config.rst:215
msgid ""
"``PYMEM_ALLOCATOR_NOT_SET`` (``0``): don't change memory allocators (use "
"defaults)"
msgstr ""

#: ../Doc/c-api/init_config.rst:217
msgid "``PYMEM_ALLOCATOR_DEFAULT`` (``1``): default memory allocators"
msgstr ""

#: ../Doc/c-api/init_config.rst:218
msgid ""
"``PYMEM_ALLOCATOR_DEBUG`` (``2``): default memory allocators with debug hooks"
msgstr ""

#: ../Doc/c-api/init_config.rst:220
msgid "``PYMEM_ALLOCATOR_MALLOC`` (``3``): force usage of ``malloc()``"
msgstr ""

#: ../Doc/c-api/init_config.rst:221
msgid ""
"``PYMEM_ALLOCATOR_MALLOC_DEBUG`` (``4``): force usage of ``malloc()`` with "
"debug hooks"
msgstr ""

#: ../Doc/c-api/init_config.rst:223
msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC`` (``5``): :ref:`Python pymalloc memory allocator "
"<pymalloc>`"
msgstr ""

#: ../Doc/c-api/init_config.rst:225
msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` (``6``): :ref:`Python pymalloc memory "
"allocator <pymalloc>` with debug hooks"
msgstr ""

#: ../Doc/c-api/init_config.rst:228
msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC`` and ``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` are not "
"supported if Python is configured using ``--without-pymalloc``"
msgstr ""

#: ../Doc/c-api/init_config.rst:231
msgid "See :ref:`Memory Management <memory>`."
msgstr ""

#: ../Doc/c-api/init_config.rst:235
msgid ""
"Set the LC_CTYPE locale to the user preferred locale? If equals to 0, set :c:"
"member:`coerce_c_locale` and :c:member:`coerce_c_locale_warn` to 0."
msgstr ""

#: ../Doc/c-api/init_config.rst:240
msgid ""
"If equals to 2, coerce the C locale; if equals to 1, read the LC_CTYPE "
"locale to decide if it should be coerced."
msgstr ""

#: ../Doc/c-api/init_config.rst:248
msgid "See :c:member:`PyConfig.dev_mode`."
msgstr ""

#: ../Doc/c-api/init_config.rst:252
msgid "See :c:member:`PyConfig.isolated`."
msgstr ""

#: ../Doc/c-api/init_config.rst:256
msgid ""
"If non-zero, disable UTF-8 Mode, set the Python filesystem encoding to "
"``mbcs``, set the filesystem error handler to ``replace``."
msgstr ""

#: ../Doc/c-api/init_config.rst:259 ../Doc/c-api/init_config.rst:536
msgid ""
"Only available on Windows. ``#ifdef MS_WINDOWS`` macro can be used for "
"Windows specific code."
msgstr ""

#: ../Doc/c-api/init_config.rst:264
msgid ""
"If non-zero, :c:func:`Py_PreInitializeFromArgs` and :c:func:"
"`Py_PreInitializeFromBytesArgs` parse their ``argv`` argument the same way "
"the regular Python parses command line arguments: see :ref:`Command Line "
"Arguments <using-on-cmdline>`."
msgstr ""

#: ../Doc/c-api/init_config.rst:271
msgid "See :c:member:`PyConfig.use_environment`."
msgstr ""

#: ../Doc/c-api/init_config.rst:275
msgid "If non-zero, enable the UTF-8 mode."
msgstr ""

#: ../Doc/c-api/init_config.rst:278
msgid "Preinitialization with PyPreConfig"
msgstr ""

#: ../Doc/c-api/init_config.rst:280
msgid "Functions to preinitialize Python:"
msgstr ""

#: ../Doc/c-api/init_config.rst:284
msgid "Preinitialize Python from *preconfig* preconfiguration."
msgstr ""

#: ../Doc/c-api/init_config.rst:288
msgid ""
"Preinitialize Python from *preconfig* preconfiguration and command line "
"arguments (bytes strings)."
msgstr ""

#: ../Doc/c-api/init_config.rst:293
msgid ""
"Preinitialize Python from *preconfig* preconfiguration and command line "
"arguments (wide strings)."
msgstr ""

#: ../Doc/c-api/init_config.rst:296 ../Doc/c-api/init_config.rst:689
msgid ""
"The caller is responsible to handle exceptions (error or exit) using :c:func:"
"`PyStatus_Exception` and :c:func:`Py_ExitStatusException`."
msgstr ""

#: ../Doc/c-api/init_config.rst:299
msgid ""
"For :ref:`Python Configuration <init-python-config>` (:c:func:"
"`PyPreConfig_InitPythonConfig`), if Python is initialized with command line "
"arguments, the command line arguments must also be passed to preinitialize "
"Python, since they have an effect on the pre-configuration like encodings. "
"For example, the :option:`-X` ``utf8`` command line option enables the UTF-8 "
"Mode."
msgstr ""

#: ../Doc/c-api/init_config.rst:306
msgid ""
"``PyMem_SetAllocator()`` can be called after :c:func:`Py_PreInitialize` and "
"before :c:func:`Py_InitializeFromConfig` to install a custom memory "
"allocator. It can be called before :c:func:`Py_PreInitialize` if :c:member:"
"`PyPreConfig.allocator` is set to ``PYMEM_ALLOCATOR_NOT_SET``."
msgstr ""

#: ../Doc/c-api/init_config.rst:311
msgid ""
"Python memory allocation functions like :c:func:`PyMem_RawMalloc` must not "
"be used before Python preinitialization, whereas calling directly "
"``malloc()`` and ``free()`` is always safe. :c:func:`Py_DecodeLocale` must "
"not be called before the preinitialization."
msgstr ""

#: ../Doc/c-api/init_config.rst:316
msgid "Example using the preinitialization to enable the UTF-8 Mode::"
msgstr ""

#: ../Doc/c-api/init_config.rst:336
msgid "PyConfig"
msgstr ""

#: ../Doc/c-api/init_config.rst:340
msgid "Structure containing most parameters to configure Python."
msgstr ""

#: ../Doc/c-api/init_config.rst:342
msgid "Structure methods:"
msgstr ""

#: ../Doc/c-api/init_config.rst:346
msgid ""
"Initialize configuration with :ref:`Python Configuration <init-python-"
"config>`."
msgstr ""

#: ../Doc/c-api/init_config.rst:351
msgid ""
"Initialize configuration with :ref:`Isolated Configuration <init-isolated-"
"conf>`."
msgstr ""

#: ../Doc/c-api/init_config.rst:356
msgid "Copy the wide character string *str* into ``*config_str``."
msgstr ""

#: ../Doc/c-api/init_config.rst:358 ../Doc/c-api/init_config.rst:364
#: ../Doc/c-api/init_config.rst:370 ../Doc/c-api/init_config.rst:376
#: ../Doc/c-api/init_config.rst:382 ../Doc/c-api/init_config.rst:390
msgid "Preinitialize Python if needed."
msgstr ""

#: ../Doc/c-api/init_config.rst:362
msgid ""
"Decode *str* using ``Py_DecodeLocale()`` and set the result into "
"``*config_str``."
msgstr ""

#: ../Doc/c-api/init_config.rst:368
msgid "Set command line arguments from wide character strings."
msgstr ""

#: ../Doc/c-api/init_config.rst:374
msgid ""
"Set command line arguments: decode bytes using :c:func:`Py_DecodeLocale`."
msgstr ""

#: ../Doc/c-api/init_config.rst:380
msgid "Set the list of wide strings *list* to *length* and *items*."
msgstr ""

#: ../Doc/c-api/init_config.rst:386
msgid "Read all Python configuration."
msgstr ""

#: ../Doc/c-api/init_config.rst:388
msgid "Fields which are already initialized are left unchanged."
msgstr ""

#: ../Doc/c-api/init_config.rst:394
msgid "Release configuration memory."
msgstr ""

#: ../Doc/c-api/init_config.rst:396
msgid ""
"Most ``PyConfig`` methods preinitialize Python if needed. In that case, the "
"Python preinitialization configuration in based on the :c:type:`PyConfig`. "
"If configuration fields which are in common with :c:type:`PyPreConfig` are "
"tuned, they must be set before calling a :c:type:`PyConfig` method:"
msgstr ""

#: ../Doc/c-api/init_config.rst:401
msgid ":c:member:`~PyConfig.dev_mode`"
msgstr ""

#: ../Doc/c-api/init_config.rst:402
msgid ":c:member:`~PyConfig.isolated`"
msgstr ""

#: ../Doc/c-api/init_config.rst:403
msgid ":c:member:`~PyConfig.parse_argv`"
msgstr ""

#: ../Doc/c-api/init_config.rst:404
msgid ":c:member:`~PyConfig.use_environment`"
msgstr ""

#: ../Doc/c-api/init_config.rst:406
msgid ""
"Moreover, if :c:func:`PyConfig_SetArgv` or :c:func:`PyConfig_SetBytesArgv` "
"is used, this method must be called first, before other methods, since the "
"preinitialization configuration depends on command line arguments (if :c:"
"member:`parse_argv` is non-zero)."
msgstr ""

#: ../Doc/c-api/init_config.rst:411
msgid ""
"The caller of these methods is responsible to handle exceptions (error or "
"exit) using ``PyStatus_Exception()`` and ``Py_ExitStatusException()``."
msgstr ""

#: ../Doc/c-api/init_config.rst:418
msgid ""
"Command line arguments, :data:`sys.argv`. See :c:member:`~PyConfig."
"parse_argv` to parse :c:member:`~PyConfig.argv` the same way the regular "
"Python parses Python command line arguments. If :c:member:`~PyConfig.argv` "
"is empty, an empty string is added to ensure that :data:`sys.argv` always "
"exists and is never empty."
msgstr ""

#: ../Doc/c-api/init_config.rst:426
msgid ":data:`sys.base_exec_prefix`."
msgstr ""

#: ../Doc/c-api/init_config.rst:430
msgid ":data:`sys.base_prefix`."
msgstr ""

#: ../Doc/c-api/init_config.rst:434
msgid ""
"If equals to 0, enable unbuffered mode, making the stdout and stderr streams "
"unbuffered."
msgstr ""

#: ../Doc/c-api/init_config.rst:437
msgid "stdin is always opened in buffered mode."
msgstr ""

#: ../Doc/c-api/init_config.rst:441
msgid ""
"If equals to 1, issue a warning when comparing :class:`bytes` or :class:"
"`bytearray` with :class:`str`, or comparing :class:`bytes` with :class:"
"`int`. If equal or greater to 2, raise a :exc:`BytesWarning` exception."
msgstr ""

#: ../Doc/c-api/init_config.rst:448
msgid ""
"Control the validation behavior of hash-based ``.pyc`` files (see :pep:"
"`552`): :option:`--check-hash-based-pycs` command line option value."
msgstr ""

#: ../Doc/c-api/init_config.rst:451
msgid "Valid values: ``always``, ``never`` and ``default``."
msgstr ""

#: ../Doc/c-api/init_config.rst:453
msgid "The default value is: ``default``."
msgstr ""

#: ../Doc/c-api/init_config.rst:457
msgid ""
"If non-zero, configure C standard streams (``stdio``, ``stdout``, "
"``stdout``). For example, set their mode to ``O_BINARY`` on Windows."
msgstr ""

#: ../Doc/c-api/init_config.rst:462
msgid "Development mode: see :option:`-X` ``dev``."
msgstr ""

#: ../Doc/c-api/init_config.rst:466
msgid "If non-zero, dump all objects which are still alive at exit."
msgstr ""

#: ../Doc/c-api/init_config.rst:468
msgid ""
"Require a debug build of Python (``Py_REF_DEBUG`` macro must be defined)."
msgstr ""

#: ../Doc/c-api/init_config.rst:472
msgid ":data:`sys.exec_prefix`."
msgstr ""

#: ../Doc/c-api/init_config.rst:476
msgid ":data:`sys.executable`."
msgstr ""

#: ../Doc/c-api/init_config.rst:480
msgid "If non-zero, call :func:`faulthandler.enable`."
msgstr ""

#: ../Doc/c-api/init_config.rst:484
msgid "Filesystem encoding, :func:`sys.getfilesystemencoding`."
msgstr ""

#: ../Doc/c-api/init_config.rst:488
msgid "Filesystem encoding errors, :func:`sys.getfilesystemencodeerrors`."
msgstr ""

#: ../Doc/c-api/init_config.rst:493
msgid "Randomized hash function seed."
msgstr ""

#: ../Doc/c-api/init_config.rst:495
msgid ""
"If :c:member:`~PyConfig.use_hash_seed` is zero, a seed is chosen randomly at "
"Pythonstartup, and :c:member:`~PyConfig.hash_seed` is ignored."
msgstr ""

#: ../Doc/c-api/init_config.rst:500
msgid "Python home directory."
msgstr ""

#: ../Doc/c-api/init_config.rst:504
msgid "If non-zero, profile import time."
msgstr ""

#: ../Doc/c-api/init_config.rst:508
msgid "Enter interactive mode after executing a script or a command."
msgstr ""

#: ../Doc/c-api/init_config.rst:512
msgid "Install signal handlers?"
msgstr ""

#: ../Doc/c-api/init_config.rst:516
msgid "Interactive mode."
msgstr ""

#: ../Doc/c-api/init_config.rst:520
msgid "If greater than 0, enable isolated mode:"
msgstr ""

#: ../Doc/c-api/init_config.rst:522
msgid ""
":data:`sys.path` contains neither the script's directory (computed from "
"``argv[0]`` or the current directory) nor the user's site-packages directory."
msgstr ""

#: ../Doc/c-api/init_config.rst:525
msgid ""
"Python REPL doesn't import :mod:`readline` nor enable default readline "
"configuration on interactive prompts."
msgstr ""

#: ../Doc/c-api/init_config.rst:527
msgid ""
"Set :c:member:`~PyConfig.use_environment` and :c:member:`~PyConfig."
"user_site_directory` to 0."
msgstr ""

#: ../Doc/c-api/init_config.rst:532
msgid ""
"If non-zero, use :class:`io.FileIO` instead of :class:`io.WindowsConsoleIO` "
"for :data:`sys.stdin`, :data:`sys.stdout` and :data:`sys.stderr`."
msgstr ""

#: ../Doc/c-api/init_config.rst:541
msgid ""
"If non-zero, dump statistics on :ref:`Python pymalloc memory allocator "
"<pymalloc>` at exit."
msgstr ""

#: ../Doc/c-api/init_config.rst:544
msgid "The option is ignored if Python is built using ``--without-pymalloc``."
msgstr ""

#: ../Doc/c-api/init_config.rst:548
msgid ""
"Module search paths as a string separated by ``DELIM`` (:data:`os.path."
"pathsep`)."
msgstr ""

#: ../Doc/c-api/init_config.rst:551
msgid ""
"Initialized from :envvar:`PYTHONPATH` environment variable value by default."
msgstr ""

#: ../Doc/c-api/init_config.rst:557
msgid ""
":data:`sys.path`. If :c:member:`~PyConfig.module_search_paths_set` is equal "
"to 0, the :c:member:`~PyConfig.module_search_paths` is overridden by the "
"function computing the :ref:`Path Configuration <init-path-config>`."
msgstr ""

#: ../Doc/c-api/init_config.rst:564
msgid "Compilation optimization level:"
msgstr ""

#: ../Doc/c-api/init_config.rst:566
msgid "0: Peephole optimizer (and ``__debug__`` is set to ``True``)"
msgstr ""

#: ../Doc/c-api/init_config.rst:567
msgid "1: Remove assertions, set ``__debug__`` to ``False``"
msgstr ""

#: ../Doc/c-api/init_config.rst:568
msgid "2: Strip docstrings"
msgstr ""

#: ../Doc/c-api/init_config.rst:572
msgid ""
"If non-zero, parse :c:member:`~PyConfig.argv` the same way the regular "
"Python command line arguments, and strip Python arguments from :c:member:"
"`~PyConfig.argv`: see :ref:`Command Line Arguments <using-on-cmdline>`."
msgstr ""

#: ../Doc/c-api/init_config.rst:579
msgid ""
"If non-zero, turn on parser debugging output (for expert only, depending on "
"compilation options)."
msgstr ""

#: ../Doc/c-api/init_config.rst:584
msgid ""
"If equal to 0, suppress warnings when computing the path configuration (Unix "
"only, Windows does not log any warning). Otherwise, warnings are written "
"into ``stderr``."
msgstr ""

#: ../Doc/c-api/init_config.rst:590
msgid ":data:`sys.prefix`."
msgstr ""

#: ../Doc/c-api/init_config.rst:594
msgid "Program name."
msgstr ""

#: ../Doc/c-api/init_config.rst:598
msgid "``.pyc`` cache prefix."
msgstr ""

#: ../Doc/c-api/init_config.rst:602
msgid ""
"Quiet mode. For example, don't display the copyright and version messages "
"even in interactive mode."
msgstr ""

#: ../Doc/c-api/init_config.rst:607
msgid "``python3 -c COMMAND`` argument."
msgstr ""

#: ../Doc/c-api/init_config.rst:611
msgid "``python3 FILENAME`` argument."
msgstr ""

#: ../Doc/c-api/init_config.rst:615
msgid "``python3 -m MODULE`` argument."
msgstr ""

#: ../Doc/c-api/init_config.rst:619
msgid "Show allocation counts at exit?"
msgstr ""

#: ../Doc/c-api/init_config.rst:621
msgid "Need a special Python build with ``COUNT_ALLOCS`` macro defined."
msgstr ""

#: ../Doc/c-api/init_config.rst:625
msgid "Show total reference count at exit?"
msgstr ""

#: ../Doc/c-api/init_config.rst:627
msgid "Need a debug build of Python (``Py_REF_DEBUG`` macro must be defined)."
msgstr ""

#: ../Doc/c-api/init_config.rst:631
msgid "Import the :mod:`site` module at startup?"
msgstr ""

#: ../Doc/c-api/init_config.rst:635
msgid "Skip the first line of the source?"
msgstr ""

#: ../Doc/c-api/init_config.rst:640
msgid ""
"Encoding and encoding errors of :data:`sys.stdin`, :data:`sys.stdout` and :"
"data:`sys.stderr`."
msgstr ""

#: ../Doc/c-api/init_config.rst:645
msgid "If non-zero, call :func:`tracemalloc.start`."
msgstr ""

#: ../Doc/c-api/init_config.rst:649
msgid "If greater than 0, use :ref:`environment variables <using-on-envvars>`."
msgstr ""

#: ../Doc/c-api/init_config.rst:653
msgid "If non-zero, add user site directory to :data:`sys.path`."
msgstr ""

#: ../Doc/c-api/init_config.rst:657
msgid "If non-zero, enable verbose mode."
msgstr ""

#: ../Doc/c-api/init_config.rst:661
msgid "Options of the :mod:`warnings` module to build warnings filters."
msgstr ""

#: ../Doc/c-api/init_config.rst:665
msgid "If non-zero, write ``.pyc`` files."
msgstr ""

#: ../Doc/c-api/init_config.rst:669
msgid ":data:`sys._xoptions`."
msgstr ""

#: ../Doc/c-api/init_config.rst:671
msgid ""
"If ``parse_argv`` is non-zero, ``argv`` arguments are parsed the same way "
"the regular Python parses command line arguments, and Python arguments are "
"stripped from ``argv``: see :ref:`Command Line Arguments <using-on-cmdline>`."
msgstr ""

#: ../Doc/c-api/init_config.rst:676
msgid ""
"The ``xoptions`` options are parsed to set other options: see :option:`-X` "
"option."
msgstr ""

#: ../Doc/c-api/init_config.rst:681
msgid "Initialization with PyConfig"
msgstr ""

#: ../Doc/c-api/init_config.rst:683
msgid "Function to initialize Python:"
msgstr ""

#: ../Doc/c-api/init_config.rst:687
msgid "Initialize Python from *config* configuration."
msgstr ""

#: ../Doc/c-api/init_config.rst:692
msgid ""
"``PyImport_FrozenModules``, ``PyImport_AppendInittab()`` or "
"``PyImport_ExtendInittab()`` is used: they must be set or called after "
"Python preinitialization and before the Python initialization."
msgstr ""

#: ../Doc/c-api/init_config.rst:696
msgid "Example setting the program name::"
msgstr ""

#: ../Doc/c-api/init_config.rst:727
msgid ""
"More complete example modifying the default configuration, read the "
"configuration, and then override some parameters::"
msgstr ""

#: ../Doc/c-api/init_config.rst:781
msgid "Isolated Configuration"
msgstr ""

#: ../Doc/c-api/init_config.rst:783
msgid ""
":c:func:`PyPreConfig_InitIsolatedConfig` and :c:func:"
"`PyConfig_InitIsolatedConfig` functions create a configuration to isolate "
"Python from the system. For example, to embed Python into an application."
msgstr ""

#: ../Doc/c-api/init_config.rst:788
msgid ""
"This configuration ignores global configuration variables, environments "
"variables and command line arguments (:c:member:`PyConfig.argv` is not "
"parsed). The C standard streams (ex: ``stdout``) and the LC_CTYPE locale are "
"left unchanged by default."
msgstr ""

#: ../Doc/c-api/init_config.rst:793
msgid ""
"Configuration files are still used with this configuration. Set the :ref:"
"`Path Configuration <init-path-config>` (\"output fields\") to ignore these "
"configuration files and avoid the function computing the default path "
"configuration."
msgstr ""

#: ../Doc/c-api/init_config.rst:802
msgid "Python Configuration"
msgstr ""

#: ../Doc/c-api/init_config.rst:804
msgid ""
":c:func:`PyPreConfig_InitPythonConfig` and :c:func:"
"`PyConfig_InitPythonConfig` functions create a configuration to build a "
"customized Python which behaves as the regular Python."
msgstr ""

#: ../Doc/c-api/init_config.rst:808
msgid ""
"Environments variables and command line arguments are used to configure "
"Python, whereas global configuration variables are ignored."
msgstr ""

#: ../Doc/c-api/init_config.rst:811
msgid ""
"This function enables C locale coercion (:pep:`538`) and UTF-8 Mode (:pep:"
"`540`) depending on the LC_CTYPE locale, :envvar:`PYTHONUTF8` and :envvar:"
"`PYTHONCOERCECLOCALE` environment variables."
msgstr ""

#: ../Doc/c-api/init_config.rst:815
msgid "Example of customized Python always running in isolated mode::"
msgstr ""

#: ../Doc/c-api/init_config.rst:858
msgid "Path Configuration"
msgstr ""

#: ../Doc/c-api/init_config.rst:860
msgid ":c:type:`PyConfig` contains multiple fields for the path configuration:"
msgstr ""

#: ../Doc/c-api/init_config.rst:862
msgid "Path configuration input fields:"
msgstr ""

#: ../Doc/c-api/init_config.rst:864
msgid ":c:member:`PyConfig.home`"
msgstr ""

#: ../Doc/c-api/init_config.rst:865
msgid ":c:member:`PyConfig.pythonpath_env`"
msgstr ""

#: ../Doc/c-api/init_config.rst:866
msgid ":c:member:`PyConfig.pathconfig_warnings`"
msgstr ""

#: ../Doc/c-api/init_config.rst:868
msgid "Path configuration output fields:"
msgstr ""

#: ../Doc/c-api/init_config.rst:870
msgid ":c:member:`PyConfig.exec_prefix`"
msgstr ""

#: ../Doc/c-api/init_config.rst:871
msgid ":c:member:`PyConfig.executable`"
msgstr ""

#: ../Doc/c-api/init_config.rst:872
msgid ":c:member:`PyConfig.prefix`"
msgstr ""

#: ../Doc/c-api/init_config.rst:873
msgid ""
":c:member:`PyConfig.module_search_paths_set`, :c:member:`PyConfig."
"module_search_paths`"
msgstr ""

#: ../Doc/c-api/init_config.rst:876
msgid ""
"If at least one \"output field\" is not set, Python computes the path "
"configuration to fill unset fields. If :c:member:`~PyConfig."
"module_search_paths_set` is equal to 0, :c:member:`~PyConfig."
"module_search_paths` is overridden and :c:member:`~PyConfig."
"module_search_paths_set` is set to 1."
msgstr ""

#: ../Doc/c-api/init_config.rst:882
msgid ""
"It is possible to completely ignore the function computing the default path "
"configuration by setting explicitly all path configuration output fields "
"listed above. A string is considered as set even if it is non-empty. "
"``module_search_paths`` is considered as set if ``module_search_paths_set`` "
"is set to 1. In this case, path configuration input fields are ignored as "
"well."
msgstr ""

#: ../Doc/c-api/init_config.rst:889
msgid ""
"Set :c:member:`~PyConfig.pathconfig_warnings` to 0 to suppress warnings when "
"computing the path configuration (Unix only, Windows does not log any "
"warning)."
msgstr ""

#: ../Doc/c-api/init_config.rst:892
msgid ""
"If :c:member:`~PyConfig.base_prefix` or :c:member:`~PyConfig."
"base_exec_prefix` fields are not set, they inherit their value from :c:"
"member:`~PyConfig.prefix` and :c:member:`~PyConfig.exec_prefix` respectively."
msgstr ""

#: ../Doc/c-api/init_config.rst:896
msgid ":c:func:`Py_RunMain` and :c:func:`Py_Main` modify :data:`sys.path`:"
msgstr ""

#: ../Doc/c-api/init_config.rst:898
msgid ""
"If :c:member:`~PyConfig.run_filename` is set and is a directory which "
"contains a ``__main__.py`` script, prepend :c:member:`~PyConfig."
"run_filename` to :data:`sys.path`."
msgstr ""

#: ../Doc/c-api/init_config.rst:901
msgid "If :c:member:`~PyConfig.isolated` is zero:"
msgstr ""

#: ../Doc/c-api/init_config.rst:903
msgid ""
"If :c:member:`~PyConfig.run_module` is set, prepend the current directory "
"to :data:`sys.path`. Do nothing if the current directory cannot be read."
msgstr ""

#: ../Doc/c-api/init_config.rst:905
msgid ""
"If :c:member:`~PyConfig.run_filename` is set, prepend the directory of the "
"filename to :data:`sys.path`."
msgstr ""

#: ../Doc/c-api/init_config.rst:907
msgid "Otherwise, prepend an empty string to :data:`sys.path`."
msgstr ""

#: ../Doc/c-api/init_config.rst:909
msgid ""
"If :c:member:`~PyConfig.site_import` is non-zero, :data:`sys.path` can be "
"modified by the :mod:`site` module. If :c:member:`~PyConfig."
"user_site_directory` is non-zero and the user's site-package directory "
"exists, the :mod:`site` module appends the user's site-package directory to :"
"data:`sys.path`."
msgstr ""

#: ../Doc/c-api/init_config.rst:915
msgid "The following configuration files are used by the path configuration:"
msgstr ""

#: ../Doc/c-api/init_config.rst:917
msgid "``pyvenv.cfg``"
msgstr ""

#: ../Doc/c-api/init_config.rst:918
msgid "``python._pth`` (Windows only)"
msgstr ""

#: ../Doc/c-api/init_config.rst:919
msgid "``pybuilddir.txt`` (Unix only)"
msgstr ""

#: ../Doc/c-api/init_config.rst:923
msgid "Py_RunMain()"
msgstr ""

#: ../Doc/c-api/init_config.rst:927
msgid ""
"Execute the command (:c:member:`PyConfig.run_command`), the script (:c:"
"member:`PyConfig.run_filename`) or the module (:c:member:`PyConfig."
"run_module`) specified on the command line or in the configuration."
msgstr ""

#: ../Doc/c-api/init_config.rst:932
msgid "By default and when if :option:`-i` option is used, run the REPL."
msgstr ""

#: ../Doc/c-api/init_config.rst:934
msgid ""
"Finally, finalizes Python and returns an exit status that can be passed to "
"the ``exit()`` function."
msgstr ""

#: ../Doc/c-api/init_config.rst:937
msgid ""
"See :ref:`Python Configuration <init-python-config>` for an example of "
"customized Python always running in isolated mode using :c:func:`Py_RunMain`."
msgstr ""

#: ../Doc/c-api/init_config.rst:943
msgid "Multi-Phase Initialization Private Provisional API"
msgstr ""

#: ../Doc/c-api/init_config.rst:945
msgid ""
"This section is a private provisional API introducing multi-phase "
"initialization, the core feature of the :pep:`432`:"
msgstr ""

#: ../Doc/c-api/init_config.rst:948
msgid "\"Core\" initialization phase, \"bare minimum Python\":"
msgstr ""

#: ../Doc/c-api/init_config.rst:950
msgid "Builtin types;"
msgstr ""

#: ../Doc/c-api/init_config.rst:951
msgid "Builtin exceptions;"
msgstr ""

#: ../Doc/c-api/init_config.rst:952
msgid "Builtin and frozen modules;"
msgstr ""

#: ../Doc/c-api/init_config.rst:953
msgid ""
"The :mod:`sys` module is only partially initialized (ex: :data:`sys.path` "
"doesn't exist yet);"
msgstr ""

#: ../Doc/c-api/init_config.rst:956
msgid "\"Main\" initialization phase, Python is fully initialized:"
msgstr ""

#: ../Doc/c-api/init_config.rst:958
msgid "Install and configure :mod:`importlib`;"
msgstr ""

#: ../Doc/c-api/init_config.rst:959
msgid "Apply the :ref:`Path Configuration <init-path-config>`;"
msgstr ""

#: ../Doc/c-api/init_config.rst:960
msgid "Install signal handlers;"
msgstr ""

#: ../Doc/c-api/init_config.rst:961
msgid ""
"Finish :mod:`sys` module initialization (ex: create :data:`sys.stdout` and :"
"data:`sys.path`);"
msgstr ""

#: ../Doc/c-api/init_config.rst:963
msgid ""
"Enable optional features like :mod:`faulthandler` and :mod:`tracemalloc`;"
msgstr ""

#: ../Doc/c-api/init_config.rst:964
msgid "Import the :mod:`site` module;"
msgstr ""

#: ../Doc/c-api/init_config.rst:965
msgid "etc."
msgstr ""

#: ../Doc/c-api/init_config.rst:967
msgid "Private provisional API:"
msgstr ""

#: ../Doc/c-api/init_config.rst:969
msgid ""
":c:member:`PyConfig._init_main`: if set to 0, :c:func:"
"`Py_InitializeFromConfig` stops at the \"Core\" initialization phase."
msgstr ""

#: ../Doc/c-api/init_config.rst:974
msgid ""
"Move to the \"Main\" initialization phase, finish the Python initialization."
msgstr ""

#: ../Doc/c-api/init_config.rst:976
msgid ""
"No module is imported during the \"Core\" phase and the ``importlib`` module "
"is not configured: the :ref:`Path Configuration <init-path-config>` is only "
"applied during the \"Main\" phase. It may allow to customize Python in "
"Python to override or tune the :ref:`Path Configuration <init-path-config>`, "
"maybe install a custom sys.meta_path importer or an import hook, etc."
msgstr ""

#: ../Doc/c-api/init_config.rst:982
msgid ""
"It may become possible to compute the :ref:`Path Configuration <init-path-"
"config>` in Python, after the Core phase and before the Main phase, which is "
"one of the :pep:`432` motivation."
msgstr ""

#: ../Doc/c-api/init_config.rst:986
msgid ""
"The \"Core\" phase is not properly defined: what should be and what should "
"not be available at this phase is not specified yet. The API is marked as "
"private and provisional: the API can be modified or even be removed anytime "
"until a proper public API is designed."
msgstr ""

#: ../Doc/c-api/init_config.rst:991
msgid ""
"Example running Python code between \"Core\" and \"Main\" initialization "
"phases::"
msgstr ""
